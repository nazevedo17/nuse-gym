// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Nuse.Core.Code.Database;

namespace Nuse.Core.Migrations
{
    [DbContext(typeof(NuseContext))]
    [Migration("20201225151910_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("Nuse.Core.Models.Customer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTimeOffset>("BirthDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("ChangedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("ChangedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<byte>("Gender")
                        .HasColumnType("tinyint");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Active = false,
                            Address = "",
                            BirthDate = new DateTimeOffset(new DateTime(1999, 2, 7, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ChangedOn = new DateTimeOffset(new DateTime(2020, 12, 25, 15, 19, 10, 261, DateTimeKind.Unspecified).AddTicks(7129), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedOn = new DateTimeOffset(new DateTime(2020, 12, 25, 15, 19, 10, 259, DateTimeKind.Unspecified).AddTicks(7452), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "a18478@alunos.ipca.pt",
                            FirstName = "Sérgio Miguel",
                            Gender = (byte)1,
                            LastName = "Machado Oliveira",
                            PhoneNumber = ""
                        });
                });

            modelBuilder.Entity("Nuse.Core.Models.Login", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<DateTimeOffset>("LoginDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Success")
                        .HasColumnType("bit");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Logins");
                });

            modelBuilder.Entity("Nuse.Core.Models.Measurement", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<double?>("Abdomen")
                        .HasColumnType("float");

                    b.Property<double?>("Age")
                        .HasColumnType("float");

                    b.Property<double?>("BMI")
                        .HasColumnType("float");

                    b.Property<double?>("Bust")
                        .HasColumnType("float");

                    b.Property<double?>("Buttocks")
                        .HasColumnType("float");

                    b.Property<long?>("ChangedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("ChangedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<double?>("Chest")
                        .HasColumnType("float");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<byte?>("Gender")
                        .HasColumnType("tinyint");

                    b.Property<double?>("Height")
                        .HasColumnType("float");

                    b.Property<double?>("Hips")
                        .HasColumnType("float");

                    b.Property<double?>("LeftAnkle")
                        .HasColumnType("float");

                    b.Property<double?>("LeftCalf")
                        .HasColumnType("float");

                    b.Property<double?>("LeftForearm")
                        .HasColumnType("float");

                    b.Property<double?>("LeftKnee")
                        .HasColumnType("float");

                    b.Property<double?>("LeftLowerThigh")
                        .HasColumnType("float");

                    b.Property<double?>("LeftMidThigh")
                        .HasColumnType("float");

                    b.Property<double?>("LeftUpperArm")
                        .HasColumnType("float");

                    b.Property<double?>("LeftUpperThigh")
                        .HasColumnType("float");

                    b.Property<DateTimeOffset>("MeasurementDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<double?>("Midriff")
                        .HasColumnType("float");

                    b.Property<double?>("RightAnkle")
                        .HasColumnType("float");

                    b.Property<double?>("RightCalf")
                        .HasColumnType("float");

                    b.Property<double?>("RightForearm")
                        .HasColumnType("float");

                    b.Property<double?>("RightKnee")
                        .HasColumnType("float");

                    b.Property<double?>("RightLowerThigh")
                        .HasColumnType("float");

                    b.Property<double?>("RightMidThigh")
                        .HasColumnType("float");

                    b.Property<double?>("RightUpperArm")
                        .HasColumnType("float");

                    b.Property<double?>("RightUpperThigh")
                        .HasColumnType("float");

                    b.Property<double?>("Waist")
                        .HasColumnType("float");

                    b.Property<double?>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Measurements");
                });

            modelBuilder.Entity("Nuse.Core.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<long?>("ChangedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("ChangedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Active = false,
                            ChangedOn = new DateTimeOffset(new DateTime(2020, 12, 25, 15, 19, 10, 262, DateTimeKind.Unspecified).AddTicks(6965), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedOn = new DateTimeOffset(new DateTime(2020, 12, 25, 15, 19, 10, 262, DateTimeKind.Unspecified).AddTicks(6686), new TimeSpan(0, 0, 0, 0, 0)),
                            CustomerId = 1L,
                            Password = "9999",
                            Username = "smo"
                        });
                });

            modelBuilder.Entity("Nuse.Core.Models.Login", b =>
                {
                    b.HasOne("Nuse.Core.Models.User", "User")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Nuse.Core.Models.Measurement", b =>
                {
                    b.HasOne("Nuse.Core.Models.Customer", "Customer")
                        .WithMany("Measurements")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Nuse.Core.Models.User", b =>
                {
                    b.HasOne("Nuse.Core.Models.Customer", "Customer")
                        .WithOne("User")
                        .HasForeignKey("Nuse.Core.Models.User", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Nuse.Core.Models.Customer", b =>
                {
                    b.Navigation("Measurements");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Nuse.Core.Models.User", b =>
                {
                    b.Navigation("Logins");
                });
#pragma warning restore 612, 618
        }
    }
}
